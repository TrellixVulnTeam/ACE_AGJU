worker_processes auto;
pid /run/nginx.pid;

events {
    # Can determine with 'ulimit -n', but this should be good enough.
    worker_connections 4096;
}

http {

    # Directives for logging setup
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Include default mime types
    include mime.types;

    # HTTPS only
    server {
        listen 8443 ssl;
        client_max_body_size 8M;

        server_name <NGINX_SERVER_NAME>;

        # Server SSL setup
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_certificate /etc/ssl/renderer.cert.pem;
        ssl_certificate_key /etc/ssl/renderer.key.pem;

        # Client SSL
        ssl_client_certificate /etc/ssl/renderer_client_ca.cert.pem;

        # Verification is optional. This allows us to return an
        # HTTP 403 to failed authentication. See the 'if' statement
        # in the location blocks for the logic to return a 403.
        ssl_verify_client optional;

        # Health check location context - prefix match
        location /ping {
            # Note that we're not enforcing client SSL verification
            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;

            proxy_redirect off;
            proxy_buffering off;
            # Now that we've terminated SSL, pass the request
            # on to Uvicorn for handling. See the 'upstream uvicorn' block below.
            proxy_pass http://uvicorn;

            # Give a separate log file so we don't log health checks when
            # tailing /var/log/nginx/access.log
            access_log /var/log/nginx/healthcheck.access.log;
        }

        # Job location context - prefix match
        location /job {

            # Enforce client SSL certificate auth.
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;

            proxy_redirect off;
            proxy_buffering off;
            proxy_http_version 1.1;

            # Now that we've done the server ssl termination and client
            # ssl authentication, pass the request on to uvicorn for handling.
            # See the 'upstream uvicorn' block below.
            proxy_pass http://uvicorn;
        }
    }

    upstream uvicorn {
        server <UVICORN_HOST>:<UVICORN_PORT>;
    }
}
