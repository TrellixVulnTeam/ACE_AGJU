; REQUIRED Section
[overview]
; REQUIRED - If enabled, the graph_resource_collector will attempt to collect events from this resource
enabled = no
; REQUIRED - the name of this resource (used by ACE)
name =
; REQUIRED - A meaningful description of the resource, consider including a link to relevant microsoft documentation
description =
; REQUIRED - A pointer to the resource argument that should be used for persistent collections
persistent_time_field =
; OPTIONAL - specify the analysis mode the submission should go into. Default is correlation
ace_analysis_mode = correlation
; OPTIONAL - How to group multple events into ACE submissions. If obmitted, every event is a submission.
group_by =
; OPTIONAL - Specify a graph account to use for this resource. The value of this field should match a unique name
; for a configured graph_collection_account, like: graph_collection_account_<unique name>
; By default, the graph_collection_account is used.
graph_account = default

; REQUIRED Section
[resource]
; REQUIRED - the Graph API version
version = v1.0
; OPTIONAL - link to MS documentation for the resource
documentation =
; REQUIRED - the resource endpint
resource =
; REQUIRED - the URL parameter string to use for the resource
parameters =

; REQUIRED Section
[arguments]
; REQUIRED - comma seperated list of required arguments that the resource needs
required =
; OPTIONAL - comma seperated optional arugments to supply to the resource on the parameter string.
optional =
; NOTE, evert optional argument must have a matching key=value to serve as the default.
; Example: 
;optional = severity,status
;severity = medium
;status = newAlert

; OPTIONAL Section
; use this section to define helpful descriptions of the argument fields above
[argument_help]
; example:
;severity = Alert severity - set by vendor/provider. Possible values are: unknown, informational, low, medium, high.
;status = Alert lifecycle status (stage). Possible values are: unknown, newAlert, inProgress, resolved

; REQUIRED Section
; how to map event fields to ACE observable types
; two types of mappings are supported:
;   First, the traditional key=value pairs.
;   The following example would map the event['id'] field to a 'graph_event_id' observable:
;id = graph_event_id
;
;   Next, you can specify the top level event key -> list of items -> field in those items
;   to map to an observable.
[observable_mapping]
; Several exmaples follow:
;id=graph_event_id
;hostStates.[].fqdn = fqdn
;hostStates.[].netBiosName = hostname
;hostStates.[].privateIpAddress = ipv4
;hostStates.[].publicIpAddress = ipv4
;userStates.[].accountName = user
;userStates.[].userPrincipalName = email_address
;networkConnections.[].destinationUrl = url
;userStates.[].logonIp = ipv4

; OPTIONAL
; by default all observations are assumed to have happened when the hunt
; was executed which is probably not what you want
; any field set to yes in this section will also record the event time
; along with the added observable so that correlation targets the correct time
[temporal_fields]
; examples:
;userStates.[].logonIp = yes
;hostStates.[].publicIpAddress = yes
;hostStates.[].privateIpAddress = yes

; OPTIONAL
; by default all events returned by the described resource will be submitted.
; If you can't use the API filters to tune out what you don't want, you can use
; this tune section. The tune values are put into a list and searched for in
; flattened event logs.
; A few examples follow.
[tune]
;string1 = "bad event can't tune out well with a filter"
;string2 = "more noise we don't care about"
;tune3 = category": "DataGovernance
