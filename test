#!/usr/bin/env bash

if [ -z "${SAQ_HOME}" ]
then
    echo "missing env var SAQ_HOME"
    exit 1
fi

cd "${SAQ_HOME}" || { echo "cannot cd to ${SAQ_HOME}"; exit 1; }

if [ -f "data/logs/unittest.log" ]
then
    rm data/logs/unittest.log
fi

if [ ! -d data_unittest ]
then
    mkdir data_unittest
fi

if [ -d data_unittest/error_reports ]
then
    rm -rf data_unittest/error_reports && mkdir data_unittest/error_reports
fi

if [ -d data_unittest/logs ]
then
    rm -rf data_unittest/logs && mkdir data_unittest/logs
else
    mkdir data_unittest/logs
fi

export SAQ_UNIT_TESTING=1

#bin/build-unittest-database

# if we passed no parameters then we run all the tests
if [ "$#" -eq "0" ]
then
    python3 -W ignore -m unittest -f -v \
        $(find -L saq -type f -name 'test*.py' -ipath '*/site/*' | sed -e 's;^lib/;;' -e 's/\.py$//' -e 's;/;.;g') \
        saq.analysis.test \
        saq.service.test \
        saq.util.test \
        saq.util.test_filter \
        saq.submission.test \
        saq.collectors.test \
        saq.collectors.test_email \
        saq.collectors.test_falcon \
        saq.collectors.test_hunter \
        saq.collectors.test_qradar_hunter \
        saq.collectors.test_query_hunter \
        saq.collectors.test_splunk_hunter \
        saq.database.test \
        saq.error.test \
        saq.extractors.ews.test \
        saq.extractors.graph.test \
        saq.test_email \
        saq.test_crawlphish \
        saq.configuration.test \
        saq.test_crypto \
        saq.test_util \
        saq.test_locks \
        saq.test_graph_api \
        saq.persistence.test \
        saq.engine.test \
        saq.modules.test_alerts \
        saq.modules.test_asset \
        saq.modules.test_cloudphish \
        saq.modules.test_command_line \
        saq.modules.test_crits \
        saq.modules.test_email \
        saq.modules.test_file_analysis \
        saq.modules.test_http \
        saq.modules.test_intel \
        saq.modules.test_url \
        saq.modules.test_render \
        saq.observables.test \
        aceapi.analysis.test \
        aceapi.engine.test \
        aceapi.cloudphish.test \
        aceapi.events.test \
        test_ace_api \

        # reintroduce these
        #saq.collectors.test_http \

        # TODO reintroduce these next two somehow
        #saq.engine.test_cloudphish \
        #saq.test_detection \
        #saq.messaging.test \

        #saq.test_pds \
        #saq.modules.test_pds \
        #saq.modules.test_vx \

        # no longer a thing
        #saq.engine.test_email \
        #saq.engine.test_ace \
        #saq.test_lock \

        # these needs to be created
        #saq.modules.test_qradar \

        #saq.collectors.test_cb_binaries \

    exit 0
fi

# otherwise we run whatever test is specified on the command line
python3 -W ignore -m unittest -f -v "$@"

#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.engine.test_cloudphish.CloudPhishEngineTestCase.test_cloudphish_engine_007_http_clear_alert
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.modules.test_asset.AssetAnalysisModuleTestCase.test_carbon_black_asset_ident_000
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.engine.test_ace.ACECoreEngineTestCase.test_ace_engine_002_persistent_engine
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.engine.test_email.EmailEngineTestCase.test_email_engine_003_email_processing
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.engine.test_engine.EngineTestCase.test_engine_024_mysql_engine_submit
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.test_analysis.RootAnalysisTestCase.test_analysis_004_has_observable
#PYTHONPATH=lib python3 -W ignore -m unittest -v saq.test_database.DatabaseTestCase.test_database_007_caching_processes


if [ -f data/logs/unittest.log ]
then
    GREP_COLORS='mt=01;103' grep --color=always \\[WARNING\\] data/logs/unittest.log | grep -v 'request for unknown encrypted password'
    GREP_COLORS='mt=01;31' grep --color=always \\[ERROR\\] data/logs/unittest.log
    GREP_COLORS='mt=01;32' grep --color=always MARKER data/logs/unittest.log
fi

if [ -d $data_dir/error_reports ]
then
    if [ $( ls $data_dir/error_reports | wc -l ) -gt "0" ]
    then
        echo
        echo "*** ERRORS REPORTED ** "
        echo
        cat $data_dir/error_reports/* 2> /dev/null
    fi
fi
